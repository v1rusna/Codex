# -*- coding: utf-8 -*-
import os, random, shutil, bz2, collections, time


class ImprovedCodexGame:
    def __init__(self):
        self.version = "12.09.2025"

        self.__word = None
        self._guessed = {}
        self.__attempts = []
        self.__all_indices = collections.defaultdict(list)
        self.__used_count = collections.defaultdict(int)
        self.__size = shutil.get_terminal_size(fallback=(80, 24))
        self.__width = self.__size.columns
        self.__height = self.__size.lines

        # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—á–∫–æ–≤
        self._base_points = 1000
        self._current_points = self._base_points
        self._hints = 3
        self._start_time = None
        self._combo_count = 0
        self._max_combo = 0
        self._perfect_positions = 0
        self._total_correct_letters = 0
        self._attempt_penalties = 0

        # –ë–æ–Ω—É—Å—ã –∏ —à—Ç—Ä–∞—Ñ—ã
        self.SCORING = {
            "exact_match": 15,
            "partial_match": 5,
            "wrong_letter": -8,
            "attempt_penalty": -25,
            "hint_penalty": -50,
            "time_bonus_threshold": 180,  # —Å–µ–∫—É–Ω–¥
            "combo_multiplier": 1.5,
            "speed_bonus_max": 200,
            "perfect_word_bonus": 100,
        }

    def random_word(self) -> str:
        return random.choice(self.decrypt("words.xor")).strip().lower()

    def clear(self):
        os.system("cls" if os.name == "nt" else "clear")

    def pause(self):
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

    def run(self):
        self._start_time = time.time()
        self.__word = self.random_word()

        for char in self.__word:
            self._guessed[char] = False
        for i, char in enumerate(self.__word):
            self.__all_indices[char].append(i)

        self._game_cycle()

    def _game_cycle(self):
        while True:
            self._display_info()
            text = self._input()

            if text == self.__word:
                # –ë–æ–Ω—É—Å –∑–∞ –ø–æ–±–µ–¥—É
                self._current_points += self.SCORING["perfect_word_bonus"]
                break

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            self.__used_count = collections.defaultdict(int)
            new_word = []
            attempt_correct_positions = 0

            for i, char in enumerate(text):
                result, is_exact = self._char_processing(char, i)
                new_word.append(result)
                if is_exact:
                    attempt_correct_positions += 1

            # –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–±–æ
            if attempt_correct_positions > 0:
                self._combo_count += 1
                self._max_combo = max(self._max_combo, self._combo_count)

                # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–±–æ
                if self._combo_count >= 3:
                    combo_bonus = int(
                        attempt_correct_positions
                        * self.SCORING["exact_match"]
                        * (self.SCORING["combo_multiplier"] - 1)
                    )
                    self._current_points += combo_bonus
            else:
                self._combo_count = 0

            self._perfect_positions += attempt_correct_positions

            user_word = "".join(new_word)
            self.__attempts.append(user_word)

            # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–ø—ã—Ç–∫—É
            self._attempt_penalties += self.SCORING["attempt_penalty"]
            self._current_points += self.SCORING["attempt_penalty"]

            print(f"> {user_word}")

        self._end_game()

    def _input(self) -> str:
        text = input("> ").strip().lower()

        if text == "exit":
            print("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –±—ã–ª–æ:", self.__word)
            self.pause()
            raise KeyboardInterrupt

        if text == "?" and self._hints > 0:
            self._hints -= 1
            self._current_points += self.SCORING["hint_penalty"]

            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–µ—É–≥–∞–¥–∞–Ω–Ω—É—é –±—É–∫–≤—É
            unguessed_chars = [char for char in self.__word if not self._guessed[char]]
            if unguessed_chars:
                char_to_reveal = random.choice(unguessed_chars)
                self._guessed[char_to_reveal] = True

        return text[: len(self.__word)]

    def _char_processing(self, char: str, i: int) -> tuple[str, bool]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º ANSI-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

        Returns:
            tuple: (formatted_char, is_exact_match)
        """
        # ANSI –∫–æ–¥—ã
        ANSI_CODES = {
            "exact_match": "46",  # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω)
            "partial_match": "220",  # –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–∂–µ–ª—Ç—ã–π)
            "no_match": "1",  # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–∂–∏—Ä–Ω—ã–π)
        }

        is_exact = False

        if char in self.__word:
            idx_list = self.__all_indices[char]
            used_count = self.__used_count[char]

            if used_count < len(idx_list):
                index = idx_list[used_count]
                self.__used_count[char] += 1

                if index == i:
                    # –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
                    self._current_points += self.SCORING["exact_match"]
                    ansi_code = ANSI_CODES["exact_match"]
                    self._guessed[char] = True
                    self._total_correct_letters += 1
                    is_exact = True
                else:
                    # –°–∏–º–≤–æ–ª –µ—Å—Ç—å –≤ —Å–ª–æ–≤–µ, –Ω–æ –Ω–µ –≤ —Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
                    self._current_points += self.SCORING["partial_match"]
                    ansi_code = ANSI_CODES["partial_match"]
            else:
                # –í—Å–µ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
                self._current_points += self.SCORING["partial_match"]
                ansi_code = ANSI_CODES["partial_match"]
        else:
            # –°–∏–º–≤–æ–ª–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ
            self._current_points += self.SCORING["wrong_letter"]
            ansi_code = ANSI_CODES["no_match"]

        # –û—á–∫–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏
        self._current_points = max(0, self._current_points)

        formatted_char = f"\u001b[38;5;{ansi_code}m{char}\u001b[0m"
        return formatted_char, is_exact

    def _calculate_final_score(self) -> dict:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—á–µ—Ç —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –±–æ–Ω—É—Å–æ–≤"""
        elapsed_time = time.time() - self._start_time

        # –ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
        speed_bonus = 0
        if elapsed_time < self.SCORING["time_bonus_threshold"]:
            speed_bonus = int(
                self.SCORING["speed_bonus_max"]
                * (1 - elapsed_time / self.SCORING["time_bonus_threshold"])
            )

        # –ë–æ–Ω—É—Å –∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–º–∞–ª–æ –ø–æ–ø—ã—Ç–æ–∫)
        efficiency_bonus = max(0, (10 - len(self.__attempts)) * 20)

        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–±–æ
        combo_bonus = self._max_combo * 25

        final_score = (
            self._current_points + speed_bonus + efficiency_bonus + combo_bonus
        )

        return {
            "base_score": self._current_points,
            "speed_bonus": speed_bonus,
            "efficiency_bonus": efficiency_bonus,
            "combo_bonus": combo_bonus,
            "final_score": final_score,
            "elapsed_time": elapsed_time,
        }

    def _get_performance_rank(self, score: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤"""
        if score >= 1200:
            return "üèÜ –ú–ê–°–¢–ï–†"
        elif score >= 1000:
            return "ü•á –≠–ö–°–ü–ï–†–¢"
        elif score >= 800:
            return "ü•à –ü–†–û–§–ò"
        elif score >= 600:
            return "ü•â –õ–Æ–ë–ò–¢–ï–õ–¨"
        elif score >= 400:
            return "üìö –ù–û–í–ò–ß–û–ö"
        else:
            return "ü§î –£–ß–ï–ù–ò–ö"

    def _end_game(self):
        self.clear()
        score_data = self._calculate_final_score()
        rank = self._get_performance_rank(score_data["final_score"])

        print("=" * 50)
        print("üéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –í–´ –£–ì–ê–î–ê–õ–ò –°–õ–û–í–û! üéâ")
        print("=" * 50)
        print()
        print(f"üìù –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ: {self.__word.upper()}")
        print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {len(self.__attempts)}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –∏–≥—Ä—ã: {score_data['elapsed_time']:.1f} —Å–µ–∫")
        print(f"üî• –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–º–±–æ: {self._max_combo}")
        print()
        print("üìä –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –û–ß–ö–û–í:")
        print("-" * 30)
        print(f"–ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏:      {score_data['base_score']:>6}")
        print(f"–ë–æ–Ω—É—Å –∑–∞ —Å–∫–æ—Ä–æ—Å—Ç—å: {score_data['speed_bonus']:>6}")
        print(f"–ë–æ–Ω—É—Å –∑–∞ –ø–æ–ø—ã—Ç–∫–∏:  {score_data['efficiency_bonus']:>6}")
        print(f"–ë–æ–Ω—É—Å –∑–∞ –∫–æ–º–±–æ:    {score_data['combo_bonus']:>6}")
        print("-" * 30)
        print(f"–ò–¢–û–ì–û–í–´–ï –û–ß–ö–ò:     {score_data['final_score']:>6}")
        print()
        print(f"üèÖ –í–ê–® –†–ê–ù–ì: {rank}")
        print()
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {self._perfect_positions}")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –±—É–∫–≤: {self._total_correct_letters}")
        print(f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫: {3 - self._hints}")
        print()
        print("–í—Å–µ –≤–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏:")
        for i, attempt in enumerate(self.__attempts, 1):
            print(f"{i:2}. {attempt}")
        print()
        self.pause()

    def _display_info(self):
        self.clear()
        width = int(self.__width / 2 - len("| Codex Game |") / 2 - 1)
        print("<v1rus team>", end="")
        print("=" * (width - len("<v1rus team>")), end="")
        print("> Codex Game <", end="")
        print("=" * (width - len(f"<{self.version}>")), end="")
        print(f"<{self.version}>")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        elapsed = time.time() - self._start_time if self._start_time else 0
        combo_display = f" üî•x{self._combo_count}" if self._combo_count > 1 else ""

        print(
            f"üìä –û—á–∫–∏: {self._current_points} | ‚è±Ô∏è  {elapsed:.0f}—Å | üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏: {self._hints}{combo_display}"
        )
        print(f"üéØ –°–ª–æ–≤–æ: <{self._get_word()}>")
        print("-" * min(40, self.__width))

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏
        for attempt in self.__attempts[-8:]:
            print(f"> {attempt}")

        if len(self.__attempts) > 8:
            print("...")

    def _get_word(self):
        word = []
        for char in self.__word:
            if self._guessed[char]:
                word.append(char)
            else:
                word.append("_")
        return " ".join(word)

    def decrypt(self, filename: str):
        with open(filename, "rb") as file:
            data = file.read()

        data = bz2.decompress(data)

        key_bytes = "uStgURnWUEYbcKsfbvVuWRSnZz56bWv9lje/tUSLbJ4=".encode("utf-8")
        decrypted_data = bytearray()

        for i, byte in enumerate(data):
            decrypted_data.append(byte ^ key_bytes[i % len(key_bytes)])

        return decrypted_data.decode("utf-8").splitlines()


if __name__ == "__main__":
    try:
        game = ImprovedCodexGame()
        game.run()
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã.")
